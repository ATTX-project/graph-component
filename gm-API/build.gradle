buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath group: 'com.linkedin.pygradle', name: 'pygradle-plugin', version: '0.4.1'
    }
}

apply plugin: 'com.linkedin.python-web-app'

version=0.1

python {
  testDir = file('tests')
}
// define an explicit installation sequence for the dependencies.
// project.tasks.findByName('installPythonRequirements').sorted = false

dependencies {
      python 'pypi:jsonschema:2.5.1'
      python 'pypi:elasticsearch:5.1.0'
      python 'pypi:falcon:1.1.0'
      python 'pypi:SPARQLWrapper:1.8.0'
      python 'pypi:rdflib:4.2.2'
      python 'pypi:rdflib-jsonld:0.4.0'
      python 'pypi:requests:2.13.0'
      python 'pypi:gunicorn:19.6.0'
      python 'pypi:pytest-html:1.12.0'
      python 'pypi:PyLD:0.7.1'
      python 'pypi:python-mimeparse:1.6.0'
      python 'pypi:click:6.7'
      test 'pypi:mock:2.0.0'
      test 'pypi:httpretty:0.8.14'
}

repositories {
  // using a local repository
  ivy{
    name 'pypi-local'
    url "/home/user/pivy/"
    layout 'pattern' , {
      artifact '[organisation]/[module]/[revision]/[artifact]-[revision](-[classifier]).[ext]'
      ivy '[organisation]/[module]/[revision]/[module]-[revision].ivy'
    }
  }
  // using a web repository
  ivy{
    name 'pypi-attx'
    url "http://attx-dev.hulib.helsinki.fi:5039/"
    layout 'pattern' , {
      artifact '[organisation]/[module]/[revision]/[artifact]-[revision](-[classifier]).[ext]'
      ivy '[organisation]/[module]/[revision]/[module]-[revision].ivy'
    }
  }
  // setting the repository for jenkins use
  ivy{
    name 'pypi-jenkins'
    url "http://pypirepo:5039/"
    layout 'pattern' , {
      artifact '[organisation]/[module]/[revision]/[artifact]-[revision](-[classifier]).[ext]'
      ivy '[organisation]/[module]/[revision]/[module]-[revision].ivy'
    }
  }
}

// in case we want have a ./gradlw command.
task wrapper(type: Wrapper) {
   gradleVersion = '3.3'
}

// Succesfully running the tests requires a logs folder existing.
task creatLogsFolder {
  description = "Create logs folder."
  doFirst {
      mkdir('logs')
  }
}

// generate Tests report via a script.
task runTests(type:Exec) {
  description = "generate Tests report via a script."
  workingDir '.'
  // Create the output folder
  doFirst {
    mkdir('build/test-report')
  }
  commandLine './runTests.sh'
}

buildPex.dependsOn creatLogsFolder
pytest.dependsOn creatLogsFolder
