import re
import falcon
import random
import requests
from rdflib import ConjunctiveGraph
from SPARQLWrapper import SPARQLWrapper
from gm_api.utils.prefixes import bind_prefix
from gm_api.utils.logs import app_logger
from gm_api.applib.retrieve_linkstrategy import retrieve_strategy
from gm_api.utils.prefixes import ATTXURL


def perform_strategy(graphStore, strategy):
    """Determine linking strategy based on Linking Strategy type."""
    current_strategy = retrieve_strategy(graphStore['endpoint'], re.split(r'\/|\#', strategy['uri'])[-1])
    # For a better random use uuid library
    work_graph_context = "{0}work{1}".format(ATTXURL, str(random.randint(1e15, 1e16))) if "output" not in strategy else strategy['output']
    if current_strategy is not None and current_strategy['parameters']['hasStrategyType'] == "SPARQL":
        result = sparql_strategy(graphStore, current_strategy['parameters']['query'])
        app_logger.info('Executing SPARQL based linking strategy. Resulting: {0} triples.'.format(len(result)))
        output_generated_graph(graphStore['endpoint'], result, work_graph_context)
    else:
        pass
        app_logger.info('Could not determine strategy type.')


def sparql_strategy(graphStore, query):
    """Generate Links based on SPARQL query strategy."""
    graph = ConjunctiveGraph()
    bind_prefix(graph)
    store = graphStore['endpoint']
    store_api = "http://{0}:{1}/{2}/query".format(store['host'], store['port'], store['dataset'])
    try:
        sparql = SPARQLWrapper(store_api)
        # add a default graph, though that can also be in the query string
        for named_graph in graphStore['graphs']:
            sparql.addDefaultGraph(named_graph)
        sparql.setQuery(query)
        # for named_graph in graphStore['graphs']:
        #     graph.parse('{0}{1}'.format(store_api, named_graph))
        app_logger.info('Construct outputgraph based on endpoint.')
        data = sparql.query().convert()
        graph.parse(data=data.serialize(), format='xml')
        return graph
    except Exception as error:
        app_logger.error('Mapping Failed when processing the graph! with error: {0}'.format(error))
        return error


# def insert_named_graph(endpoint, name):
#     """Adding a new named graph to the graph store."""
#     try:
#         graph = ConjunctiveGraph(store="SPARQLStore")
#         graph.open("http://{0}:{1}/{2}/update".format(endpoint['host'], endpoint['port'], endpoint['dataset']), create=True)
#         graph.update("CREATE SILENT GRAPH <%s>" % (name))
#         app_logger.info("Create new named graph in the graph store: {0}.".format(name))
#     except Exception as error:
#         app_logger.error('Could not create new named graph. Something is wrong: {0}'.format(error))
#     finally:
#         graph.close()


def output_generated_graph(endpoint, graph, context):
    """Post data to a target Graph Store."""
    # insert_named_graph(endpoint, context)
    try:
        store_api = "http://{0}:{1}/{2}/data?graph={3}".format(endpoint['host'], endpoint['port'], endpoint['dataset'], context)
        headers = {'Content-Type': 'text/turtle'}
        result = requests.post(store_api, data=graph.serialize(format='turtle'), headers=headers)
        app_logger.info('Add to graph store: "{0}" result of a linking strategy.'.format(context))
        return result.status_code
    except Exception as error:
        app_logger.error('Something is wrong: {0}'.format(error))
        raise falcon.HTTPUnprocessableEntity(
            'Unprocessable Graph generated by strategy',
            'Could not update graph store with the graph generated by the strategy.'
        )
