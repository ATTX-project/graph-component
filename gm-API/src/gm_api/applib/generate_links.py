import re
import falcon
import random
import requests
from rdflib import ConjunctiveGraph
from SPARQLWrapper import SPARQLWrapper
from gm_api.utils.logs import app_logger
from gm_api.applib.construct_cluster import strategy_cluster
from gm_api.applib.retrieve_linkstrategy import retrieve_strategy
from gm_api.utils.prefixes import bind_prefix, ATTXURL, ATTXIDs


def perform_strategy(graphStore, strategy):
    """Determine linking strategy based on Linking Strategy type."""
    current_strategy = retrieve_strategy(graphStore['endpoint'], re.split(r'\/|\#', strategy['uri'])[-1])
    # For a better random use uuid library
    work_graph_context = "{0}work{1}".format(ATTXURL, str(random.randint(1e15, 1e16))) if "output" not in strategy else strategy['output']
    if current_strategy is not None and current_strategy['parameters']['hasStrategyType'] == "SPARQL":
        result = sparql_strategy(graphStore, current_strategy['parameters']['query'])
        app_logger.info('Executing SPARQL based linking strategy. Resulting: {0} triples.'.format(len(result)))
        output_generated_graph(graphStore['endpoint'], result, work_graph_context)
        return work_graph_context
    else:
        pass
        app_logger.info('Could not determine strategy type.')


def sparql_strategy(graphStore, query):
    """Generate Links based on SPARQL query strategy."""
    graph = ConjunctiveGraph()
    bind_prefix(graph)
    try:
        if 'graphs' in graphStore:
            local_cluster = strategy_cluster(graphStore['graphs'], graphStore['endpoint'])
            result = local_cluster.query(query)
            for s, p, o in result:
                graph.add((s, p, o))
        else:
            store = graphStore['endpoint']
            store_api = "http://{0}:{1}/{2}/query".format(store['host'], store['port'], store['dataset'])
            sparql = SPARQLWrapper(store_api)
            # add a default graph, though that can also be in the query string
            sparql.addDefaultGraph(ATTXIDs)
            sparql.setQuery(query)
            # for named_graph in graphStore['graphs']:
            #     graph.parse('{0}{1}'.format(store_api, named_graph))
            data = sparql.query().convert()
            graph.parse(data=data.serialize(), format='xml')
            app_logger.info('Construct output graph based on strategy query.')
        return graph
    except Exception as error:
        app_logger.error('SPARQL strategy failed when processing the graph! with error: {0}'.format(error))
        return error


def output_generated_graph(endpoint, graph, context):
    """Post data to a target Graph Store."""
    try:
        if len(graph) > 0:
            store_api = "http://{0}:{1}/{2}/data?graph={3}".format(endpoint['host'], endpoint['port'], endpoint['dataset'], context)
            headers = {'Content-Type': 'text/turtle'}
            result = requests.post(store_api, data=graph.serialize(format='turtle'), headers=headers)
            app_logger.info('Add to graph store: "{0}" the result of the linking strategy.'.format(context))
            return result.status_code
        else:
            app_logger.info('Nothing to add to graph store.')
            pass
    except Exception as error:
        app_logger.error('Something is wrong: {0}'.format(error))
        raise falcon.HTTPUnprocessableEntity(
            'Unprocessable graph generated by the linking strategy.',
            'Could not update graph store with the graph generated by the linking strategy.'
        )
