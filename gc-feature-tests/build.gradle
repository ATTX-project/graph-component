apply plugin: 'com.chrisgahlert.gradle-dcompose-plugin'

dependencies {
    compile 'org.apache.jena:apache-jena:3.2.0'
    testCompile \
        'info.cukes:cucumber-java8:1.2.5',
        'info.cukes:cucumber-junit:1.2.5',
        'com.mashape.unirest:unirest-java:1.4.9',
        'org.skyscreamer:jsonassert:1.4.0',
        'net.javacrumbs.json-unit:json-unit:1.16.0',
        'net.javacrumbs.json-unit:json-unit-fluent:1.16.0',
//        'org.elasticsearch:elasticsearch:1.2.2',
        'org.uh.hulib.attx.gc:gc-rdf2json-indexer:1.0-SNAPSHOT'
}

ext {
    testImageWF = "latest"
    testImageGM = "latest"
    testImageFuseki = "latest"
    testImageESSiren = "latest"
    testImageES5 = "latest"
    testImageUVShared = "latest"
    testImageATTXDPUs = "latest"
}

dcompose {
    createComposeFile.useTags = true
    registry ("$registryURL") {
        // no user/pass
    }
    networks {
      testNetwork
    }
    shared {
        forcePull = true
        forceRemoveImage = true
        image = "${imageRepo}:${imageRepoPort}/uv-attx-shared:${testImageUVShared}"
        networks = [testNetwork]
    }

    mysql {
        forcePull = true
        forceRemoveImage = true
        image = 'tenforce/unified-views-mariadb:feat-compact-modular'
        env = ['MYSQL_ROOT_PASSWORD=iamroot!']
        portBindings = ['3306:3306']
        networks = [testNetwork]
        hostName = 'mysql'
    }
    backend {
        forcePull = true
        forceRemoveImage = true
        image = 'tenforce/unified-views-backend:latest'
        volumesFrom =  [shared]
        dependsOn = [mysql, shared]
        networks = [testNetwork]
    }

    frontend {
        forcePull = true
        forceRemoveImage = true
        image = 'tenforce/unified-views-frontend:latest'
        volumesFrom = [shared]
        portBindings = ['8080:8080']
        dependsOn = [backend, shared]
        networks = [testNetwork]
        hostName = 'frontend'
    }

    uvdpus {
        forcePull = true
        forceRemoveImage = true
        image = 'tenforce/unified-views-add-dpus:latest'
        dependsOn = [mysql, frontend]
        networks = [testNetwork]
    }

    attxdpus {
        forceRemoveImage = true
        image = "${imageRepo}:${imageRepoPort}/uv-attx-dpus:${testImageATTXDPUs}"
        links = [frontend.link(), mysql.link(), backend.link()]
        dependsOn = [mysql, backend, frontend]
        networks = [testNetwork]
  	}

    fuseki {
        forcePull = true
        forceRemoveImage = true
        image = "${imageRepo}:${imageRepoPort}/attx-fuseki:${testImageFuseki}"
        portBindings = ['3030:3030']
        networks = [testNetwork]
        hostName = 'fuseki'
    }

    essiren {
        forcePull = true
        forceRemoveImage = true
        image = "${imageRepo}:${imageRepoPort}/essiren:${testImageESSiren}"
        portBindings = ['9200:9200', '9300:9300']
        networks = [testNetwork]
        hostName = 'essiren'
    }

    es5 {
        forcePull = true
        forceRemoveImage = true
        image = "${imageRepo}:${imageRepoPort}/attx-es5:${testImageES5}"
        portBindings = ['9210:9210', '9310:9310']
        networks = [testNetwork]
        hostName = ['es5']
    }

    wfapi {
        forcePull = true
        forceRemoveImage = true
        image = "${imageRepo}:${imageRepoPort}/wf-api:${testImageWF}"
        portBindings = ['4301:4301']
        dependsOn = [mysql]
        networks = [testNetwork]
        hostName = 'wfapi'
    }

    gmapi {
        forcePull = true
        forceRemoveImage = true
        image = "${imageRepo}:${imageRepoPort}/gm-api:${testImageGM}"
        portBindings = ['4302:4302']
        networks = [testNetwork]
        hostName = 'gmapi'
    }

    test {
        ignoreExitCode = true
        baseDir = file('.')
        dockerFilename = 'Dockerfile'
        binds = ["/var/run/docker.sock:/run/docker.sock"]
        command = ['sh', '-c', '/tmp/runTests.sh']
        dependsOn = [frontend, backend, shared, mysql, wfapi, gmapi, essiren, fuseki, es5]
        waitForCommand = true
        forceRemoveImage = true
        attachStdout = true
        networks = [testNetwork]
    }
}

task copyReportFiles(type: DcomposeCopyFileFromContainerTask) {
    service = dcompose.test
    containerPath = '/tmp/build/reports/tests'
    destinationDir = file("build/reports/")
    cleanDestinationDir = false
}

startTestContainer.finalizedBy copyReportFiles

shadowJar {
    classifier = 'tests'
    from sourceSets.test.output
    configurations = [project.configurations.testRuntime]
}

// making sure the that fresh build of test classes is done before building the image
buildTestImage.dependsOn shadowJar
buildTestImage.dependsOn testClasses

task runContainerTests {
    dependsOn startTestContainer
    finalizedBy removeImages
    doLast {
        if(dcompose.test.exitCode != 0){ throw new GradleException("No good!") }
    }
}

task runIntegTests (type: Test) {
    dependsOn startSharedContainer, startMysqlContainer, startBackendContainer, startFrontendContainer, startFusekiContainer, startWfapiContainer, startGmapiContainer, startUvdpusContainer,  startAttxdpusContainer, startEs5Container, startEssirenContainer

    doFirst {
        systemProperty 'frontend.port', dcompose.frontend.findHostPort(8080)
        systemProperty 'frontend.host', dcompose.frontend.dockerHost
        systemProperty 'wfapi.port', dcompose.wfapi.findHostPort(4301)
        systemProperty 'wfapi.host', dcompose.wfapi.dockerHost
        systemProperty 'fuseki.port', dcompose.fuseki.findHostPort(3030)
        systemProperty 'fuseki.host', dcompose.fuseki.dockerHost
        systemProperty 'gmapi.port', dcompose.gmapi.findHostPort(4302)
        systemProperty 'gmapi.host', dcompose.gmapi.dockerHost
        systemProperty 'essiren.port', dcompose.essiren.findHostPort(9200)
        systemProperty 'essiren.tcp', dcompose.essiren.findHostPort(9300)
        systemProperty 'essiren.host', dcompose.essiren.dockerHost
        systemProperty 'es5.port', dcompose.es5.findHostPort(9210)
        systemProperty 'es5.host', dcompose.es5.dockerHost
    }
    doLast {
        systemProperties.remove 'frontend.port'
        systemProperties.remove 'frontend.host'
        systemProperties.remove 'wfapi.port'
        systemProperties.remove 'wfapi.host'
        systemProperties.remove 'fuseki.port'
        systemProperties.remove 'fuseki.host'
        systemProperties.remove 'gmapi.port'
        systemProperties.remove 'gmapi.host'
        systemProperties.remove 'essiren.port'
        systemProperties.remove 'essiren.tcp'
        systemProperties.remove 'essiren.host'
        systemProperties.remove 'es5.port'
        systemProperties.remove 'es5.host'
    }

    finalizedBy removeImages
}

