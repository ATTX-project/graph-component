class ContainersPlugin implements Plugin<Project> {
    void apply(Project project) {
      // services needed for the tests
      dcompose {
        createComposeFile.useTags = true
        registry ("$registryURL") {
          // no user/pass
        }

        fuseki {
            image = "${imageRepo}:${imageRepoPort}/attx-fuseki:latest"
            exposedPorts = ['3030']
            portBindings = ['3030:3030']
        }

        essiren {
            image = "${imageRepo}:${imageRepoPort}/essiren:latest"
            exposedPorts = ['9200', '9300']
            portBindings = ['9200:9200', '9300:9300']
        }

        es5 {
            image = "${imageRepo}:${imageRepoPort}/attx-es5:latest"
            exposedPorts = ['9210', '9310']
            portBindings = ['9210:9210', '9310:9310']
        }

        gmapi {
            image = "${imageRepo}:${imageRepoPort}/gm-api:latest"
            exposedPorts = ['4302']
            portBindings = ['4302:4302']
        }

        test {
            ignoreExitCode = true
            baseDir = file('.')
            dockerFilename = 'Dockerfile'
            binds = ["/var/run/docker.sock:/run/docker.sock"]
            command = ['sh', '-c', '/tmp/runTests.sh']
            dependsOn = [gmapi, essiren, fuseki, es5]
            waitForCommand = true
        }
      }

      task copyReportFiles(type: DcomposeCopyFileFromContainerTask) {
        service = dcompose.test
        containerPath = '/tmp/build/reports'
        destinationDir = file("build/from-container/")
        cleanDestinationDir = false
      }

      startTestContainer.finalizedBy('copyReportFiles')

      // making sure the that fresh build of test classes is done before building the image
      buildTestImage.dependsOn shadowJar
      buildTestImage.dependsOn testClasses
    }
}
